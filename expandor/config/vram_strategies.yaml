# Expandor VRAM Management Strategies
# Defines fallback chains and memory optimization strategies

vram_profiles:
  high_vram:
    # 16GB+ VRAM - Full quality, no compromises
    name: "High VRAM (16GB+)"
    min_vram_mb: 16000
    description: "Optimal settings for high-end GPUs"
    
    # Strategy preferences
    preferred_strategies:
      - hybrid_adaptive  # Can use any strategy
      - swpo  # Memory intensive but best quality
      - progressive_outpaint
    
    # Memory settings
    memory:
      keep_models_loaded: true  # Don't unload between operations
      use_cpu_offload: false  # Keep everything on GPU
      enable_gradient_checkpointing: false  # Not needed
      attention_slicing: false  # Full attention
      vae_slicing: false  # Full VAE
      sequential_cpu_offload: false
      
    # Processing settings
    processing:
      max_batch_size: 4  # Can batch operations
      tile_size: 1024  # Large tiles if tiling needed
      enable_xformers: true  # Still use for efficiency
      channels_last_memory_format: true  # Optimize memory layout
      
    # Model loading
    models:
      load_refiner: true  # Can afford refiner
      load_controlnet: true  # Can use ControlNet
      fp16_models: true  # FP16 for efficiency
      load_in_8bit: false  # Full precision
      
  medium_vram:
    # 8-16GB VRAM - Balanced approach
    name: "Medium VRAM (8-16GB)"
    min_vram_mb: 8000
    description: "Balanced settings for mid-range GPUs"
    
    preferred_strategies:
      - progressive_outpaint  # Good balance
      - tiled_expansion  # When needed
      - cpu_offload  # As fallback
      
    memory:
      keep_models_loaded: false  # Unload when not needed
      use_cpu_offload: "auto"  # Offload if needed
      enable_gradient_checkpointing: true  # Save VRAM
      attention_slicing: "auto"  # Enable if needed
      vae_slicing: true  # Always slice VAE
      sequential_cpu_offload: false  # Not yet
      
    processing:
      max_batch_size: 2
      tile_size: 768
      enable_xformers: true  # Essential
      channels_last_memory_format: true
      
    models:
      load_refiner: "conditional"  # Only for high/ultra quality
      load_controlnet: true
      fp16_models: true
      load_in_8bit: false
      
  low_vram:
    # 4-8GB VRAM - Conservative settings
    name: "Low VRAM (4-8GB)"
    min_vram_mb: 4000
    description: "Conservative settings for entry-level GPUs"
    
    preferred_strategies:
      - tiled_expansion  # Memory efficient
      - cpu_offload  # Primary strategy
      - direct_upscale  # Fallback
      
    memory:
      keep_models_loaded: false
      use_cpu_offload: true  # Always offload
      enable_gradient_checkpointing: true
      attention_slicing: true  # Always slice
      vae_slicing: true
      sequential_cpu_offload: true  # Enable sequential offload
      model_cpu_offload: true  # Offload entire model
      
    processing:
      max_batch_size: 1  # Single image only
      tile_size: 512  # Small tiles
      enable_xformers: true  # Critical
      channels_last_memory_format: false  # May use more memory
      
    models:
      load_refiner: false  # Can't afford
      load_controlnet: false  # Too much memory
      fp16_models: true  # Essential
      load_in_8bit: true  # Consider 8-bit
      
  minimal_vram:
    # <4GB VRAM - Extreme conservation
    name: "Minimal VRAM (<4GB)"
    min_vram_mb: 2000
    description: "Extreme conservation for minimal GPUs"
    
    preferred_strategies:
      - cpu_offload  # Only viable strategy
      - direct_upscale  # Non-AI fallback
      
    memory:
      keep_models_loaded: false
      use_cpu_offload: true
      enable_gradient_checkpointing: true
      attention_slicing: true
      vae_slicing: true
      sequential_cpu_offload: true
      model_cpu_offload: true
      offload_state_dict: true  # Offload model weights
      
    processing:
      max_batch_size: 1
      tile_size: 256  # Tiny tiles
      enable_xformers: true
      channels_last_memory_format: false
      low_vram_mode: true  # Special mode
      
    models:
      load_refiner: false
      load_controlnet: false
      fp16_models: true
      load_in_8bit: true
      use_tiny_models: true  # Use smaller model variants

# Fallback chains for different VRAM levels
fallback_chains:
  high_vram:
    # Try best strategies first
    - strategy: hybrid_adaptive
      max_attempts: 2
    - strategy: swpo
      max_attempts: 2
    - strategy: progressive_outpaint
      max_attempts: 3
    - strategy: tiled_expansion
      modifications:
        tile_size: 1024
    - strategy: direct_upscale
      # Last resort
      
  medium_vram:
    # Balanced fallback
    - strategy: progressive_outpaint
      max_attempts: 2
    - strategy: tiled_expansion
      max_attempts: 2
      modifications:
        tile_size: 768
        clear_cache_every: 2
    - strategy: cpu_offload
      modifications:
        enable_sequential_offload: true
    - strategy: direct_upscale
      
  low_vram:
    # Conservative fallback
    - strategy: tiled_expansion
      max_attempts: 1
      modifications:
        tile_size: 512
        clear_cache_every: 1
    - strategy: cpu_offload
      max_attempts: 2
      modifications:
        offload_mode: "aggressive"
    - strategy: direct_upscale
      modifications:
        use_cpu: true
        
  minimal_vram:
    # Extreme fallback
    - strategy: cpu_offload
      max_attempts: 1
      modifications:
        offload_everything: true
        use_disk_cache: true
    - strategy: direct_upscale
      modifications:
        use_cpu: true
        tile_size: 256

# Dynamic VRAM management rules
dynamic_management:
  # Monitoring thresholds
  monitoring:
    check_interval_ms: 500  # Check VRAM every 500ms
    warning_threshold: 0.85  # Warn at 85% usage
    critical_threshold: 0.95  # Take action at 95%
    
  # Automatic actions based on VRAM pressure
  pressure_responses:
    warning:
      - action: "clear_cache"
        description: "Clear CUDA cache"
      - action: "reduce_batch_size"
        description: "Reduce batch size to 1"
        
    critical:
      - action: "enable_cpu_offload"
        description: "Enable CPU offload immediately"
      - action: "reduce_resolution"
        description: "Process at lower resolution"
        max_reduction: 0.75  # Reduce to 75% of target
      - action: "switch_strategy"
        description: "Switch to more memory-efficient strategy"
        
    out_of_memory:
      - action: "emergency_clear"
        description: "Clear everything and retry"
      - action: "fallback_cpu"
        description: "Fall back to CPU processing"
        
  # Memory optimization techniques
  optimizations:
    - name: "attention_slicing"
      vram_savings_mb: 1000
      performance_impact: "low"
      
    - name: "vae_slicing"
      vram_savings_mb: 500
      performance_impact: "low"
      
    - name: "cpu_offload"
      vram_savings_mb: 4000
      performance_impact: "medium"
      
    - name: "sequential_cpu_offload"
      vram_savings_mb: 6000
      performance_impact: "high"
      
    - name: "gradient_checkpointing"
      vram_savings_mb: 2000
      performance_impact: "medium"
      
    - name: "8bit_models"
      vram_savings_mb: 3000
      performance_impact: "low"
      quality_impact: "low"

# Global VRAM settings
global:
  # Safety margins
  safety_margin_mb: 500  # Always keep free
  reserved_system_mb: 1000  # Reserve for system
  
  # Automatic profile selection
  auto_profile_selection: true
  profile_override: null  # Can force a profile
  
  # Recovery settings
  max_oom_retries: 3
  oom_recovery_delay_ms: 1000
  
  # Monitoring
  enable_vram_logging: true
  log_peak_usage: true
  warn_on_profile_downgrade: true