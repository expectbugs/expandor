# Expandor Phase 1 Implementation Checklist

## CRITICAL: How to Use This Checklist
- [ ] **SAVE YOUR PROGRESS**: After each major section, note the last completed checkbox number
- [ ] **IF INTERRUPTED**: Search for "RESUME:" to find where you left off
- [ ] **IF ERROR OCCURS**: Check "RECOVERY:" sections for that step
- [ ] **VALIDATION IS MANDATORY**: Never skip validation steps marked with ✓

## Pre-Start Verification
- [ ] 1. Verify you have read CLAUDE.md completely
- [ ] 2. Verify you have expandor1.md open and ready
- [ ] 3. Create a new terminal/workspace for Expandor project
- [ ] 4. Note current working directory: `pwd` → ________________

## Section 1: Repository Setup (Steps 1.1)
**⚠️ CRITICAL ORDER: Must complete ALL of section 1 before moving to section 2**

### Directory Structure
- [ ] 5. Create main directory: `mkdir -p expandor && cd expandor`
- [ ] 6. Verify location: `pwd` should end with `/expandor`
- [ ] 7. Initialize git: `git init`
- [ ] 8. Create package structure:
  ```bash
  mkdir -p expandor/{core,strategies,processors,utils,adapters,config}
  mkdir -p expandor/processors/refinement
  mkdir -p expandor/strategies/experimental
  mkdir -p tests/{unit,integration,performance,fixtures}
  mkdir -p examples/test_images
  mkdir -p docs/{api,strategies}
  ```
- [ ] 9. ✓ VALIDATE: `ls -la expandor/` shows all subdirectories
- [ ] 9a. ✓ VALIDATE: `ls -la expandor/processors/refinement/` exists
- [ ] 9b. ✓ VALIDATE: `ls -la expandor/strategies/experimental/` exists
- [ ] 10. Create all `__init__.py` files as specified (including subdirs)
- [ ] 11. ✓ VALIDATE: `find . -name "__init__.py" | wc -l` shows 9 (7 main + 2 subdirs)

### Environment Setup
- [ ] 12. Create .gitignore file with all entries
- [ ] 13. Create virtual environment: `python -m venv venv`
- [ ] 14. Activate venv: `source venv/bin/activate` (Windows: `venv\Scripts\activate`)
- [ ] 15. ✓ VALIDATE: `which python` shows venv path
- [ ] 16. Create requirements.txt with ALL dependencies
- [ ] 17. Install requirements: `pip install -r requirements.txt`
- [ ] 18. ✓ VALIDATE: `pip list | grep torch` shows torch installed

**CHECKPOINT A**: Basic setup complete. If resuming, ensure venv is activated!

## Section 2: Core Component Extraction

### Step 1.2: VRAMManager
- [ ] 19. Create `expandor/core/vram_manager.py` using the EXACT heredoc from expandor1.md
- [ ] 19a. **NOTE**: The dtype bug has been fixed - uses 2 bytes for float16
- [ ] 20. ✓ VALIDATE: File exists and has ~150 lines
- [ ] 21. ✓ VALIDATE: `python -c "from expandor.core.vram_manager import VRAMManager"` works

**RECOVERY: If import fails, check you're in the expandor root directory**

### Step 1.3: DimensionCalculator  
- [ ] 22. Create `expandor/utils/dimension_calculator.py` with EXACT content
- [ ] 22a. **NOTE**: Vertical expansion logic has been implemented (was placeholder)
- [ ] 23. ✓ VALIDATE: File exists and has ~370 lines
- [ ] 24. ✓ VALIDATE: Contains `calculate_progressive_strategy` method (NOT calculate_progressive_outpaint_strategy)
- [ ] 25. ✓ VALIDATE: `python -c "from expandor.utils.dimension_calculator import DimensionCalculator"` works

### Step 1.4: BaseStrategy (⚠️ MUST BE BEFORE Step 1.5!)
- [ ] 26. **CRITICAL**: Create `expandor/strategies/base_strategy.py` FIRST
- [ ] 27. ✓ VALIDATE: File exists and contains BaseExpansionStrategy class
- [ ] 28. ✓ VALIDATE: `python -c "from expandor.strategies.base_strategy import BaseExpansionStrategy"` works

**⚠️ STOP: Do NOT proceed to Step 1.5 until Step 1.4 is complete!**

### Step 1.5: ProgressiveOutpaintStrategy
- [ ] 29. Create `expandor/strategies/progressive_outpaint.py`
- [ ] 30. ✓ VALIDATE: Check line ~748 uses `calculate_progressive_strategy` (not calculate_progressive_outpaint_strategy)
- [ ] 31. ✓ VALIDATE: `python -c "from expandor.strategies.progressive_outpaint import ProgressiveOutpaintStrategy"` works

**CHECKPOINT B**: Core strategies complete. Save progress here.

### Step 1.6: ArtifactDetector
- [ ] 32. Create `expandor/processors/artifact_removal.py`
- [ ] 33. ✓ VALIDATE: File exists and has ArtifactDetector class
- [ ] 34. ✓ VALIDATE: `python -c "from expandor.processors.artifact_removal import ArtifactDetector"` works

### Step 1.7: Mock Pipelines
- [ ] 35. Create `expandor/adapters/mock_pipeline.py`
- [ ] 36. ✓ VALIDATE: Check line ~1306 has `abs(hash(prompt))` not just `hash(prompt)`
- [ ] 37. ✓ VALIDATE: All three mock pipeline classes exist

### Step 1.8: Test Structure
- [ ] 38. Create `tests/fixtures/generate_test_images.py`
- [ ] 39. Run: `python tests/fixtures/generate_test_images.py || echo "Warning: Failed to generate test images"`
- [ ] 40. ✓ VALIDATE: Check if test images were created in tests/fixtures/
- [ ] 41. Create `tests/unit/test_vram_manager.py` 
- [ ] 42. ✓ VALIDATE: File ends with proper EOF (not EOF after assert statement)

**CHECKPOINT C**: Test infrastructure ready.

## Section 3: Configuration and Package Setup

### Step 1.9: Configuration Files
- [ ] 43. Create ALL yaml config files in expandor/config/:
  - [ ] strategies.yaml
  - [ ] quality_presets.yaml  
  - [ ] model_constraints.yaml
  - [ ] vram_strategies.yaml
- [ ] 44. ✓ VALIDATE: `ls expandor/config/*.yaml | wc -l` shows 4

### Step 1.10: Package Files
- [ ] 45. Create setup.py with all content
- [ ] 46. Create README.md 
- [ ] 47. Create expandor/__init__.py with exports
- [ ] 48. Create expandor/core/config.py
- [ ] 49. Create expandor/core/exceptions.py
- [ ] 50. ✓ VALIDATE: Check exceptions.py has `from typing import Optional, Any` (after docstring)
- [ ] 51. Create expandor/core/expandor.py
- [ ] 52. ✓ VALIDATE: Check expandor.py has `from PIL import Image` in imports section

### Step 1.10: Integration Test
- [ ] 53. Create `tests/integration/test_basic_expansion.py`
- [ ] 54. ✓ VALIDATE: Check line ~2003 has `result.image_path.exists()` not `Path(result.image_path).exists()`

**CHECKPOINT D**: All files created.

## Section 4: Installation and Testing

### Install Package
- [ ] 55. Install in development mode: `pip install -e ".[dev]"`
- [ ] 56. ✓ VALIDATE: `pip list | grep expandor` shows the package

### Run Tests
- [ ] 57. Run unit tests: `pytest tests/unit/test_vram_manager.py -v`
- [ ] 58. Note any failures: _______________________
- [ ] 59. Run integration tests: `pytest tests/integration/test_basic_expansion.py -v`
- [ ] 60. Note any failures: _______________________

**RECOVERY: If tests fail, check:**
- Virtual environment is activated
- All dependencies installed
- You're in the expandor root directory

### Final Validation
- [ ] 61. Verify all imports work:
  ```bash
  python -c "from expandor import Expandor, ExpandorConfig"
  python -c "from expandor.core.vram_manager import VRAMManager"
  python -c "from expandor.strategies.progressive_outpaint import ProgressiveOutpaintStrategy"
  ```
- [ ] 62. ✓ All imports successful

### Git Commit
- [ ] 63. Stage all files: `git add .`
- [ ] 64. Commit: `git commit -m "Phase 1: Repository setup and core component extraction complete"`
- [ ] 65. ✓ VALIDATE: `git log` shows the commit

## COMPLETION CRITERIA
- [ ] All 69 checkboxes marked (including 9a, 9b, 19a, 22a)
- [ ] All validation steps passed
- [ ] Tests are running (even if placeholder)
- [ ] Git repository has initial commit

## RESUME POINTS
If interrupted, search for these markers:
- **RESUME: After setup** → Start at checkbox #19
- **RESUME: After core components** → Start at checkbox #35  
- **RESUME: After configs** → Start at checkbox #53
- **RESUME: After file creation** → Start at checkbox #55

## CRITICAL WARNINGS
1. **NEVER** create progressive_outpaint.py before base_strategy.py
2. **ALWAYS** validate imports after creating each file
3. **MUST** use `abs(hash(...))` in mock pipeline
4. **MUST** use `calculate_progressive_strategy` not `calculate_progressive_outpaint_strategy`
5. **ALWAYS** check you're in the right directory before running commands

## SUCCESS INDICATORS
- No import errors
- All files created in correct locations
- Tests run without Python errors
- Git repository initialized with first commit
- Can import Expandor class successfully

**Phase 1 Complete!** Proceed to expandor2.1.md only after ALL items checked.